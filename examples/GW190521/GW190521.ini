; This is an example config file that can be used to run time-domain inference on a binary black hole signal.
; In this example, we look at GW190521. This ini file works with the condor and slurm pipelines.

; THIS SECTION IS IGNORED WHEN RUNNING WITH THE SLURM PIPELINE. 
; IF RUNNING WITH CONDOR, MAKE SURE TO REPLACE LAL_DATA_PATH=... 
[condor]
accounting_group_user = simona.miller
accounting_group = ligo.dev.o4.cbc.pe.bilby
environment = "HDF5_USE_FILE_LOCKING=FAlSE OMP_NUM_THREADS=1 OMP_PROC_BIND=false LAL_DATA_PATH=/home/simona.miller/lalsuite-extra/data/lalsimulation"

[executables]
; Replace with the path to `run_sampler.py` on your computer
run_sampler = /mnt/home/smiller/src/time-domain-gw-inference/time_domain_gw_inference/run_sampler.py

; PATHS TO RELEVANT INPUT DATA 
[paths]
; to run this example, you must first downloaded the data with `GW190521_input_data/get_data.sh` 
dataPath = ./GW190521_input_data
refPEpath = ${dataPath}/GW190521_posterior_samples.h5 
dataH1path = ${dataPath}/H-H1_GWOSC_16KHZ_R2-1242442952-32.hdf5
dataL1path = ${dataPath}/L-L1_GWOSC_16KHZ_R2-1242442952-32.hdf5
dataV1path = ${dataPath}/V-V1_GWOSC_16KHZ_R2-1242442952-32.hdf5
psdH1path = ${dataPath}/glitch_median_PSD_H1.dat
psdL1path = ${dataPath}/glitch_median_PSD_L1.dat
psdV1path = ${dataPath}/glitch_median_PSD_V1.dat

; ARGUMENTS FOR THE TDINF CODE (`run_sampler.py`)
[time_domain_gw_inference]
; which interferometers, strain data, and PSDs
ifos = H1 L1 V1
data-path-dict = {'H1':'${paths:dataH1path}', 'L1':'${paths:dataL1path}', 'V1':'${paths:dataV1path}'}
psd-path-dict = {'H1':'${paths:psdH1path}', 'L1':'${paths:psdL1path}', 'V1':'${paths:psdV1path}'}
pe-posterior-h5-file = ${paths:refPEpath}
; how do we want to get reference parameters from the reference posterior (pe-posterior-h5-file)?
reference-parameter-method = maxL
; priors
total-mass-prior-bounds = 200 400
mass-ratio-prior-bounds = 0.17 1
spin-magnitude-prior-bounds = 0 0.99
luminosity-distance-prior-bounds = 100 10000
time-prior-sigma = 0.01
; waveform approximant
approx = NRSur7dq4
; number of CPUs to run on (typically, more = faster)
ncpu = 128
; number of steps and walkers for the MCMC
nwalkers = 512
nsteps = 50000
; start and end time for the FULL segment (cutoffs applied via commandline)
Tstart = 1242442966.907715
Tend = 1242442967.607715
; various frequencies needed for data analysis
; note that f22-start is the waveform start frequency, while flow is the PSD start frequency.
sampling-rate = 2048
f22-start = 0 
fref = 11
flow = 11
fmax = 1024
; COMMENT OUT IF YOU WANT THE RUN TO RESTART WHEN `run_sampler.py` IS CALLED RATHER THAN PICK UP 
; WHERE IT LEFT OFF FROM THE EMCEE BACKEND
resume =
; COMMENT OUT THE TWO LINES BELOW TO FIX GEOCENT TIME AND SKYPOS TO THEIR REFERENCE VALUES 
; INSTEAD OF SAMPLING OVER THEM DURING INFERENCE
vary-skypos =
vary-time =
; UNCOMMENT THE LINE BELOW TO RUN ONLY ON THE PRIOR
; only-prior = 

; If you want to run on an injection instead of real data ... 

; If you want to the initial walkers from the run to be drawn in a custom way ... 